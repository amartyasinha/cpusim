<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="AC-1207_Q1-Q12.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="OP" type="required" numBits="4" relativity="absolute" signed="false" defaultValue="0" id="model.Fieldf3a022">
	</Field>
	<Field name="ADDR" type="required" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="model.Field1fb0ea6">
	</Field>
	<Field name="REGISTER" type="required" numBits="16" relativity="absolute" signed="false" defaultValue="0" id="model.Field15feb10">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" initialValue="0" readOnly="false" id="model.module.Register1fd3b79" />
	<Register name="AR" width="12" initialValue="0" readOnly="false" id="model.module.Register1c7f94" />
	<Register name="DR" width="16" initialValue="0" readOnly="false" id="model.module.Register1d7cb0f" />
	<Register name="E" width="1" initialValue="0" readOnly="false" id="model.module.Register11cabce" />
	<Register name="I" width="1" initialValue="0" readOnly="false" id="model.module.Register1e06b67" />
	<Register name="IR" width="16" initialValue="0" readOnly="false" id="model.module.Registerc35a50" />
	<Register name="PC" width="12" initialValue="0" readOnly="false" id="model.module.Register19770f4" />
	<Register name="S" width="1" initialValue="0" readOnly="false" id="model.module.Register199e493" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="CARRY" bit="0" register="model.module.Register11cabce" halt="false" id="model.module.ConditionBit1520854" />
	<ConditionBit name="HLT" bit="0" register="model.module.Register199e493" halt="true" id="model.module.ConditionBit1e9c934" />

	<!--............. rams ..........................-->
	<RAM name="MAIN" length="4096" cellSize="16" id="model.module.RAM12916ad" />

	<!--............. set ...........................-->
	<Set name="0&lt;-AC" register="model.module.Register1fd3b79" start="0" numBits="16" value="0" id="model.microinstruction.CpusimSet1cf0290" />
	<Set name="0&lt;-E" register="model.module.Register11cabce" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSet120fb9f" />

	<!--............. test ..........................-->
	<Test name="AC!=0,SKIP-1" register="model.module.Register1fd3b79" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test616c7f" />
	<Test name="AC(0)!=0,SKIP-1" register="model.module.Register1fd3b79" start="0" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test1790af" />
	<Test name="AC(0)!=1,SKIP-1" register="model.module.Register1fd3b79" start="0" numBits="1" comparison="NE" value="1" omission="1" id="model.microinstruction.Test1565c05" />
	<Test name="AC&gt;=0,SKIP1" register="model.module.Register1fd3b79" start="0" numBits="1" comparison="GE" value="0" omission="1" id="model.microinstruction.Test1771cfb" />
	<Test name="DR!=0,SKIP-1" register="model.module.Register1d7cb0f" start="0" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test649ffe" />

	<!--............. increment .....................-->
	<Increment name="INCR-AC" register="model.module.Register1fd3b79" delta="1" id="model.microinstruction.Incrementdaf275" />
	<Increment name="INCR-DR" register="model.module.Register1d7cb0f" delta="1" id="model.microinstruction.Increment15b225f" />
	<Increment name="INCR-PC" register="model.module.Register19770f4" delta="1" id="model.microinstruction.Incrementdc62cb" />

	<!--............. shift .........................-->
	<Shift name="SHL-AC" type="cyclic" source="model.module.Register1fd3b79" destination="model.module.Register1fd3b79" direction="left" distance="1" id="model.microinstruction.Shift1e4080a" />
	<Shift name="SHR-AC" type="cyclic" source="model.module.Register1fd3b79" destination="model.module.Register1fd3b79" direction="right" distance="1" id="model.microinstruction.Shift7ffac7" />

	<!--............. logical .......................-->
	<Logical name="AC'&lt;-AC" type="NOT" source1="model.module.Register1fd3b79" source2="model.module.Register1fd3b79" destination="model.module.Register1fd3b79" id="model.microinstruction.Logical721928" />
	<Logical name="AC&lt;-AC^DR" type="AND" source1="model.module.Register1fd3b79" source2="model.module.Register1d7cb0f" destination="model.module.Register1fd3b79" id="model.microinstruction.Logical16478a3" />
	<Logical name="E'&lt;-E" type="NOT" source1="model.module.Register11cabce" source2="model.module.Register11cabce" destination="model.module.Register11cabce" id="model.microinstruction.Logical899621" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC&lt;-AC*DR" type="MULTIPLY" source1="model.module.Register1fd3b79" source2="model.module.Register1d7cb0f" destination="model.module.Register1fd3b79" carryBit="model.module.ConditionBit1520854" id="model.microinstruction.Arithmetic7aed6f" />
	<Arithmetic name="AC&lt;-AC+DR" type="ADD" source1="model.module.Register1fd3b79" source2="model.module.Register1d7cb0f" destination="model.module.Register1fd3b79" carryBit="model.module.ConditionBit1520854" id="model.microinstruction.Arithmetic50f11" />
	<Arithmetic name="AC&lt;-DR-AC" type="SUBTRACT" source1="model.module.Register1d7cb0f" source2="model.module.Register1fd3b79" destination="model.module.Register1fd3b79" id="model.microinstruction.Arithmetic6cd652" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC(0)&lt;-E" source="model.module.Register11cabce" srcStartBit="0" dest="model.module.Register1fd3b79" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR11515f4" />
	<TransferRtoR name="AC(15)&lt;-E" source="model.module.Register11cabce" srcStartBit="0" dest="model.module.Register1fd3b79" destStartBit="15" numBits="1" id="model.microinstruction.TransferRtoR1a189c2" />
	<TransferRtoR name="AC&lt;-DR" source="model.module.Register1d7cb0f" srcStartBit="0" dest="model.module.Register1fd3b79" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR6138a7" />
	<TransferRtoR name="AR&lt;-DR(4-15)" source="model.module.Register1d7cb0f" srcStartBit="4" dest="model.module.Register1c7f94" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoRb9645f" />
	<TransferRtoR name="AR&lt;-IR(4-15)" source="model.module.Registerc35a50" srcStartBit="4" dest="model.module.Register1c7f94" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR18a7e09" />
	<TransferRtoR name="AR&lt;-PC" source="model.module.Register19770f4" srcStartBit="0" dest="model.module.Register1c7f94" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR220c63" />
	<TransferRtoR name="E&lt;-AC(0)" source="model.module.Register1fd3b79" srcStartBit="0" dest="model.module.Register11cabce" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR1cda400" />
	<TransferRtoR name="E&lt;-AC(15)" source="model.module.Register1fd3b79" srcStartBit="15" dest="model.module.Register11cabce" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR35a67a" />
	<TransferRtoR name="PC&lt;-AR" source="model.module.Register1c7f94" srcStartBit="0" dest="model.module.Register19770f4" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR3de383" />
	<TransferRtoR name="PC&lt;-IR(4-15)" source="model.module.Registerc35a50" srcStartBit="4" dest="model.module.Register19770f4" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoRab173" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="DECODE-IR" ir="model.module.Registerc35a50" id="model.microinstruction.Decodeb0479e" />

	<!--............. set condition bit .............-->
	<SetCondBit name="HLT" bit="model.module.ConditionBit1e9c934" value="1" id="model.microinstruction.SetCondBit12ee892" />

	<!--............. io ............................-->
	<IO name="INP" direction="input" type="integer" buffer="model.module.Register1fd3b79" connection="[Console]" id="model.microinstruction.IO1bd1640" />
	<IO name="OUT" direction="output" type="integer" buffer="model.module.Register1fd3b79" connection="[Console]" id="model.microinstruction.IO1850e1d" />

	<!--............. memory access .................-->
	<MemoryAccess name="DR&lt;-MAIN[AR]" direction="read" memory="model.module.RAM12916ad" data="model.module.Register1d7cb0f" address="model.module.Register1c7f94" id="model.microinstruction.MemoryAccess1168f8b" />
	<MemoryAccess name="IR&lt;-MAIN[AR]" direction="read" memory="model.module.RAM12916ad" data="model.module.Registerc35a50" address="model.module.Register1c7f94" id="model.microinstruction.MemoryAccess1bd62c1" />
	<MemoryAccess name="MAIN[AR]&lt;-AC" direction="write" memory="model.module.RAM12916ad" data="model.module.Register1fd3b79" address="model.module.Register1c7f94" id="model.microinstruction.MemoryAccessf7d60" />
	<MemoryAccess name="MAIN[AR]&lt;-DR" direction="write" memory="model.module.RAM12916ad" data="model.module.Register1d7cb0f" address="model.module.Register1c7f94" id="model.microinstruction.MemoryAccess1d57fda" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End98d63c" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR220c63" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess1bd62c1" />
		<Microinstruction microRef="model.microinstruction.Incrementdc62cb" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR18a7e09" />
		<Microinstruction microRef="model.microinstruction.Decodeb0479e" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="JUMPN" opcode="5" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#f3db85 #a294c5" assemblyColors="#f3db85 #a294c5" >
		<Microinstruction microRef="model.microinstruction.Test1771cfb" />
		<Microinstruction microRef="model.microinstruction.TransferRtoRab173" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="JUMPZ" opcode="3" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#8ddcb4 #dd8bf1" assemblyColors="#8ddcb4 #dd8bf1" >
		<Microinstruction microRef="model.microinstruction.Test616c7f" />
		<Microinstruction microRef="model.microinstruction.TransferRtoRab173" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="JUMP" opcode="1" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#c78db3 #99aac9" assemblyColors="#c78db3 #99aac9" >
		<Microinstruction microRef="model.microinstruction.TransferRtoRab173" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="SUB" opcode="b" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#a9d4b0 #a1beee" assemblyColors="#a9d4b0 #a1beee" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess1168f8b" />
		<Microinstruction microRef="model.microinstruction.Arithmetic6cd652" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="MULTIPLY" opcode="a" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#9fef82 #edd6a7" assemblyColors="#9fef82 #edd6a7" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess1168f8b" />
		<Microinstruction microRef="model.microinstruction.Arithmetic7aed6f" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="OUT" opcode="f400" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#f7f9cd" assemblyColors="#f7f9cd" >
		<Microinstruction microRef="model.microinstruction.IO1850e1d" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="INP" opcode="f800" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#a0e4c3" assemblyColors="#a0e4c3" >
		<Microinstruction microRef="model.microinstruction.IO1bd1640" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="e001" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#9dcdd4" assemblyColors="#9dcdd4" >
		<Microinstruction microRef="model.microinstruction.SetCondBit12ee892" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="SZE" opcode="e002" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#95a381" assemblyColors="#95a381" >
		<Microinstruction microRef="model.microinstruction.Test616c7f" />
		<Microinstruction microRef="model.microinstruction.Incrementdc62cb" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="SZA" opcode="e004" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#8cea93" assemblyColors="#8cea93" >
		<Microinstruction microRef="model.microinstruction.Test616c7f" />
		<Microinstruction microRef="model.microinstruction.Incrementdc62cb" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="SNA" opcode="e008" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#fa8bd7" assemblyColors="#fa8bd7" >
		<Microinstruction microRef="model.microinstruction.Test1565c05" />
		<Microinstruction microRef="model.microinstruction.Incrementdc62cb" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="SPA" opcode="e010" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#d6d6fa" assemblyColors="#d6d6fa" >
		<Microinstruction microRef="model.microinstruction.Test1790af" />
		<Microinstruction microRef="model.microinstruction.Incrementdc62cb" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="INC" opcode="e020" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#b1a19c" assemblyColors="#b1a19c" >
		<Microinstruction microRef="model.microinstruction.Incrementdaf275" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="CIL" opcode="e040" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#bfae88" assemblyColors="#bfae88" >
		<Microinstruction microRef="model.microinstruction.Shift1e4080a" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR1a189c2" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR1cda400" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="CIR" opcode="e080" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#9bb58f" assemblyColors="#9bb58f" >
		<Microinstruction microRef="model.microinstruction.Shift7ffac7" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR11515f4" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR35a67a" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="CME" opcode="e100" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#efdca8" assemblyColors="#efdca8" >
		<Microinstruction microRef="model.microinstruction.Logical899621" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="CMA" opcode="e200" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#d1e2d8" assemblyColors="#d1e2d8" >
		<Microinstruction microRef="model.microinstruction.Logical721928" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="CLE" opcode="e400" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#97e0af" assemblyColors="#97e0af" >
		<Microinstruction microRef="model.microinstruction.CpusimSet120fb9f" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="CLA" opcode="e800" instructionFormat="REGISTER" assemblyFormat="REGISTER" instructionColors="#bf8689" assemblyColors="#bf8689" >
		<Microinstruction microRef="model.microinstruction.CpusimSet1cf0290" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="ISZ" opcode="c" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#f9f3df #808983" assemblyColors="#f9f3df #808983" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess1168f8b" />
		<Microinstruction microRef="model.microinstruction.Increment15b225f" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess1d57fda" />
		<Microinstruction microRef="model.microinstruction.Test649ffe" />
		<Microinstruction microRef="model.microinstruction.Incrementdc62cb" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="BUN" opcode="8" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#b2baf2 #93d0d5" assemblyColors="#b2baf2 #93d0d5" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR3de383" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="6" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#81daf1 #8ed9c7" assemblyColors="#81daf1 #8ed9c7" >
		<Microinstruction microRef="model.microinstruction.MemoryAccessf7d60" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="LDA" opcode="4" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#aab2a6 #e1b489" assemblyColors="#aab2a6 #e1b489" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess1168f8b" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR6138a7" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="ADD" opcode="2" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#88aad6 #cfda94" assemblyColors="#88aad6 #cfda94" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess1168f8b" />
		<Microinstruction microRef="model.microinstruction.Arithmetic50f11" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="0" instructionFormat="OP ADDR" assemblyFormat="OP ADDR" instructionColors="#b2dcbf #a294ea" assemblyColors="#b2dcbf #a294ea" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess1168f8b" />
		<Microinstruction microRef="model.microinstruction.Logical16478a3" />
		<Microinstruction microRef="model.microinstruction.End98d63c" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM12916ad" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="false" />

	<!--............. program counter info ..................-->

</Machine>
